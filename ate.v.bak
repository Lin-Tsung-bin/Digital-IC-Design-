module ate(clk,reset,pix_data,bin,threshold);
input clk;
input reset;
input [7:0] pix_data;
//input type;
output bin;
output [7:0] threshold;
reg [7:0] threshold;
reg bin;

	reg [7:0] buffer [63:0];
	//reg [5:0]counter;
	reg [6:0] count;

	//reg [7:0]max0, min0;
	reg [7:0] min;
	reg [7:0] max;
	//reg [6:0]block;
	reg [4:0] block_count;
	integer i;

	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			block_count <= 5'd0;
		end
		else
		begin
			if((count == 7'd63)&&(block_count == 5'd5))
				begin
					block_count <= 5'd0;
				end
			else if(count == 7'd63)
				begin
					block_count <= block_count + 5'd1;
				end
		end
	end
	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			count <= 7'd0;
		end
		else
		begin
			count <= count + 7'd1;
		end
	end
	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			for(i = 0; i < 64; i = i + 1)
			begin
				buffer[i] <= 8'd0;
			end
		end
		else
		begin
			buffer[count] <= pix_data;
		end
	end
	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			max <= 8'd0;
		end
		else
		begin
		   if(count == 7'd0)
		   begin
		      max <= pix_data;
		   end
			else if(max < pix_data)
			begin
				max <= pix_data;
			end
		end
	end
	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			min <= 8'hff;
		end
		else
		begin
		   if(count == 7'd0)
		   begin
		      min0 <= pix_data;
		   end
			else if(min > pix_data)
			begin
				min <= pix_data;
			end
		end
	end

	//output
	wire dout;
	wire [7:0]avg;
	wire [7:0]thout;
	wire [8:0]sum;
	
	assign sum = {1'b0, min} + {1'b0, max};
	assign avg = (sum[0]) ? (sum + 9'd01) >> 1 : sum >> 1;
	assign dout = (((block_count == 5'd1)||(block_count == 5'd0))) ? 1'b0 :
	              ((count == 7'd0)&&(buffer[0] >= avg)) ? 1'b1 : 
	              ((count != 7'd0)&&(buffer[count] >= threshold)) ? 1'b1 : 1'b0;
	              
				 
	assign thout = (((block_count == 5'd1)||(block_count == 5'd0))) ? 8'd0 : avg;
	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			bin <= 1'b0;
		end
		else
		begin
			bin <= dout;
		end
	end
	
	always@(posedge clk or posedge reset)
	begin
		if(reset)
		begin
			threshold <= 8'd0;
		end
		else
		begin
			if(count == 7'd0)
			begin
				threshold <= thout;
			end
		end
	end
	
	
endmodule
